org: atomic14
app: chatgpt-chess-plugin
service: chatgpt-chess-plugin

frameworkVersion: "3"

custom:
  tableName: "games-table-${sls:stage}"
  wsgi:
    app: app.app
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  PAPERTRAIL_APP_NAME:
    dev: chess-gpt-dev
    prod: chess-gpt-prod
  OPENAI_VERIFY_TOKEN:
    dev: 11fbb1bf3cea43c382f9960f43dcd6a0
    prod: c059e5d7904a4d26a1d2fd532927fcf2
  OPENAI_CHESS_SECRET:
    local: top_secret
    dev: arn:aws:secretsmanager:us-east-1:140049730323:secret:OPENAI_CHESS_SECRET-9pAAQQ
    prod: arn:aws:secretsmanager:us-east-1:140049730323:secret:OPENAI_CHESS_SECRET-9pAAQQ

provider:
  name: aws
  runtime: python3.9
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [GamesTable, Arn]
  environment:
    GAMES_TABLE: ${self:custom.tableName}

functions:
  api:
    handler: wsgi_handler.handler
    environment:
      OPENAI_VERIFY_TOKEN: ${self:custom.OPENAI_VERIFY_TOKEN.${sls:stage}}
      PAPERTRAIL_APP_NAME: ${self:custom.PAPERTRAIL_APP_NAME.${sls:stage}}
      OPENAI_CHESS_SECRET: ${self:custom.OPENAI_CHESS_SECRET.${sls:stage}}
    memorySize: 4096
    events:
      - httpApi: "*"

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-dynamodb-local

resources:
  Resources:
    GamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: conversationId
            AttributeType: S
        KeySchema:
          - AttributeName: conversationId
            KeyType: HASH
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        # give the lambda permission to get secrets from the AWS Secrets Manager
    ChessSecretsPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: chess-secrets
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: arn:aws:secretsmanager:us-east-1:140049730323:secret:OPENAI_CHESS_SECRET-9pAAQQ
        Roles:
          - Ref: IamRoleLambdaExecution

package:
  patterns:
    - "!node_modules/**"
    - "!venv/**"
    - "!dynamodb/**"
